# Task ID: 2
# Title: Design and Implement Document Metadata Database Schema and Queries
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Create the `documents` table schema using Drizzle ORM, implement TypeScript query functions for document metadata management, and generate migration files to update the database.
# Details:
Define a new `documents` table in your Drizzle ORM schema file, including columns for document ID (primary key), user ID (foreign key), year, original filename, stored filename/path, file size, file type/MIME type, upload timestamp, last modified timestamp, and optional description/tags. Use appropriate TypeScript types and Drizzle column types, following the project's naming conventions (e.g., snake_case for DB, camelCase for TS). Reference the users table for the user ID foreign key. Implement query functions in a new module (e.g., documents.ts) that follow the established pattern (as seen in contabilita.ts), including: get documents by user ID and year, get a single document by ID with user authorization, insert, update, delete document metadata, and search/filter by type, name, etc. Ensure all queries enforce user authorization and input validation. Use Drizzle Kit to generate and apply migration files for the new table, and update the migration workflow as needed. Document the schema and queries for maintainability.

# Test Strategy:
1. Run Drizzle Kit migrations to ensure the documents table is created with correct columns and constraints. 2. Write unit and integration tests for each query function, verifying correct data retrieval, insertion, update, and deletion. 3. Test authorization logic by attempting to access documents as different users. 4. Validate search and filter queries with various parameters. 5. Confirm that all TypeScript types align with the schema and that error handling is robust. 6. Roll back and re-apply migrations to ensure idempotency.

# Subtasks:
## 1. Define the `documents` Table Schema in Drizzle ORM [pending]
### Dependencies: None
### Description: Create the `documents` table schema in the Drizzle ORM schema file, specifying all required columns (document ID, user ID as foreign key, year, original filename, stored filename/path, file size, file type/MIME type, upload timestamp, last modified timestamp, optional description/tags) using appropriate Drizzle and TypeScript types, and referencing the users table for the foreign key.
### Details:
Ensure column names use snake_case for the database and camelCase for TypeScript. Follow project naming conventions and Drizzle ORM best practices for schema definition.

## 2. Implement TypeScript Query Functions for Document Metadata [pending]
### Dependencies: 2.1
### Description: Develop TypeScript query functions in a new module (e.g., documents.ts) for managing document metadata, including: get documents by user ID and year, get a single document by ID with user authorization, insert, update, delete document metadata, and search/filter by type, name, etc.
### Details:
Ensure all queries enforce user authorization and input validation. Follow the established pattern from existing modules (e.g., contabilita.ts).

## 3. Generate and Apply Migration Files Using Drizzle Kit [pending]
### Dependencies: 2.1
### Description: Use Drizzle Kit to generate migration files for the new `documents` table and apply them to update the database schema.
### Details:
Export the schema model as required by Drizzle Kit and update the migration workflow to include the new table.

## 4. Integrate and Test Foreign Key Constraints with Users Table [pending]
### Dependencies: 2.1, 2.3
### Description: Ensure the user ID foreign key in the `documents` table correctly references the users table, enforcing referential integrity.
### Details:
Test insertion and deletion scenarios to confirm foreign key constraints are enforced as expected.

## 5. Document the Schema and Query Functions for Maintainability [pending]
### Dependencies: 2.2, 2.3
### Description: Write clear documentation for the `documents` table schema and all query functions, including usage examples, expected inputs/outputs, and authorization logic.
### Details:
Follow the project's documentation standards and ensure all new code is covered.

## 6. Validate End-to-End Functionality and Workflow Integration [pending]
### Dependencies: 2.2, 2.3, 2.4, 2.5
### Description: Test the complete workflow: schema migration, query function execution, and integration with the existing application, ensuring all requirements are met and no regressions occur.
### Details:
Perform integration tests covering document creation, retrieval, update, deletion, and search, including authorization and validation checks.

